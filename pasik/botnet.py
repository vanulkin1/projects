import telebot
from telebot import types
import json
import os
import time
import asyncio
from telethon import TelegramClient, functions
from telethon.errors import (
    PeerIdInvalidError, FloodWaitError, AuthKeyError,
    AuthKeyUnregisteredError, UserDeactivatedError, RPCError
)
import glob
from datetime import datetime, timedelta
import logging
import threading

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8076809934:AAEI9mNl1vNDSoISXO4Y-bEkkvLtA5K8h9I"
CRYPTO_PAY_TOKEN = "357259:AAIQ8eTVkkYcT5O2Ev1oJYniCHtFLKHhm6j"  
#–ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω CryptoBot
API_ID = 2040
API_HASH = "b18441a1ff607e10a989891a5462e627"
ADMIN_ID = 426217102
COOLDOWN_MINUTES = 15
MAX_CONCURRENT_SESSIONS = 2

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = telebot.TeleBot(BOT_TOKEN)

# –§–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏
DATABASE_FILE = "datab123ase.json"
SESSIONS_FOLDER = "sessions"
LOGS_FOLDER = "logs"
INVALID_SESSIONS_FILE = "invalid_sessions.json"

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫
for folder in [SESSIONS_FOLDER, LOGS_FOLDER]:
    if not os.path.exists(folder):
        os.makedirs(folder)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.WARNING)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
payment_data = {}
session_upload_count = {}

def load_database():
    if os.path.exists(DATABASE_FILE):
        try:
            with open(DATABASE_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {
                "users": {},
                "subscriptions": {},
                "cooldowns": {}
            }
    return {
        "users": {},
        "subscriptions": {},
        "cooldowns": {}
    }

def save_database(data):
    try:
        with open(DATABASE_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ë–î: {e}")

def load_invalid_sessions():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
    if os.path.exists(INVALID_SESSIONS_FILE):
        try:
            with open(INVALID_SESSIONS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return []
    return []

def save_invalid_sessions(invalid_list):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
    try:
        with open(INVALID_SESSIONS_FILE, 'w', encoding='utf-8') as f:
            json.dump(invalid_list, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {e}")

def add_invalid_session(session_name):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö"""
    invalid_sessions = load_invalid_sessions()
    if session_name not in invalid_sessions:
        invalid_sessions.append(session_name)
        save_invalid_sessions(invalid_sessions)

def get_total_sessions():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ—Å—Å–∏–π"""
    session_files = glob.glob(os.path.join(SESSIONS_FOLDER, "*.session"))
    return len(session_files)

def clean_invalid_sessions():
    """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
    invalid_sessions = load_invalid_sessions()
    removed_count = 0
    
    for session_name in invalid_sessions:
        session_path = os.path.join(SESSIONS_FOLDER, f"{session_name}.session")
        if os.path.exists(session_path):
            try:
                os.remove(session_path)
                removed_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ {session_name}: {e}")
    
    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å–µ—Å—Å–∏–π
    save_invalid_sessions([])
    return removed_count

db = load_database()

def has_active_subscription(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id_str = str(user_id)
    if user_id_str not in db["subscriptions"]:
        return False
    
    sub = db["subscriptions"][user_id_str]
    if sub["type"] == "forever":
        return True
    
    expiry = datetime.fromisoformat(sub["expires_at"])
    return datetime.now() < expiry

def get_subscription_info(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    user_id_str = str(user_id)
    if user_id_str not in db["subscriptions"]:
        return "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    
    sub = db["subscriptions"][user_id_str]
    if sub["type"] == "forever":
        return "–ù–∞–≤—Å–µ–≥–¥–∞"
    
    expiry = datetime.fromisoformat(sub["expires_at"])
    if datetime.now() >= expiry:
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à—É—é –ø–æ–¥–ø–∏—Å–∫—É
        del db["subscriptions"][user_id_str]
        save_database(db)
        return "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    
    days_left = (expiry - datetime.now()).days + 1
    return f"{days_left} –¥–Ω–µ–π"

def add_subscription(user_id, days):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id_str = str(user_id)
    
    if days == "forever":
        db["subscriptions"][user_id_str] = {
            "type": "forever",
            "expires_at": None
        }
    else:
        current_time = datetime.now()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–µ–π
        if user_id_str in db["subscriptions"] and has_active_subscription(user_id):
            if db["subscriptions"][user_id_str]["type"] == "forever":
                return  # –£–∂–µ –Ω–∞–≤—Å–µ–≥–¥–∞
            
            current_expiry = datetime.fromisoformat(db["subscriptions"][user_id_str]["expires_at"])
            if current_expiry > current_time:
                current_time = current_expiry
        
        new_expiry = current_time + timedelta(days=int(days))
        db["subscriptions"][user_id_str] = {
            "type": "days",
            "expires_at": new_expiry.isoformat()
        }
    
    save_database(db)

async def create_crypto_client():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ CryptoBot –≤ async –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ"""
    try:
        from aiocryptopay import AioCryptoPay, Networks
        crypto = AioCryptoPay(token=CRYPTO_PAY_TOKEN, network=Networks.MAIN_NET)
        return crypto
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è crypto –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return None

def safe_edit_message(chat_id, message_id, text, parse_mode=None, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        bot.edit_message_text(
            text,
            chat_id,
            message_id,
            parse_mode=parse_mode,
            reply_markup=reply_markup
        )
        return True
    except Exception as e:
        if "message is not modified" not in str(e):
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

# ==================== –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ï–°–°–ò–Ø–ú–ò ====================

@bot.message_handler(commands=['sessions'])
def sessions_panel(message):
    """–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏"""
    try:
        if message.from_user.id != ADMIN_ID:
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤")
            return
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        add_btn = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data="sessions_add")
        clean_btn = types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å", callback_data="sessions_clean")
        
        markup.add(add_btn, clean_btn)
        
        total_sessions = get_total_sessions()
        invalid_sessions = len(load_invalid_sessions())
        
        panel_text = f"<b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏</b>\n\nüìä <b>–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π:</b> <code>{total_sessions}</code>\n‚ùå <b>–ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö:</b> <code>{invalid_sessions}</code>"
        
        bot.send_message(
            message.chat.id,
            panel_text,
            parse_mode='HTML',
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞–Ω–µ–ª–∏ —Å–µ—Å—Å–∏–π: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "sessions_add")
def sessions_add_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–π"""
    try:
        if call.from_user.id != ADMIN_ID:
            return
        
        safe_edit_message(
            call.message.chat.id,
            call.message.message_id,
            "<b>–°–∫–∏–Ω—å—Ç–µ —Ñ–∞–π–ª—ã session Telethon</b>\n\n<b>–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞–ø–∏—à–∏—Ç–µ /stop</b>",
            parse_mode='HTML'
        )
        
        user_states[call.from_user.id] = "uploading_sessions"
        session_upload_count[call.from_user.id] = 0
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–π: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "sessions_clean")
def sessions_clean_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
    try:
        if call.from_user.id != ADMIN_ID:
            return
        
        removed_count = clean_invalid_sessions()
        total_sessions = get_total_sessions()
        
        clean_text = f"üßπ <b>–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n‚ùå <b>–£–¥–∞–ª–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö:</b> <code>{removed_count}</code>\nüìä <b>–û—Å—Ç–∞–ª–æ—Å—å —Å–µ—Å—Å–∏–π:</b> <code>{total_sessions}</code>"
        
        safe_edit_message(
            call.message.chat.id,
            call.message.message_id,
            clean_text,
            parse_mode='HTML'
        )
        
        bot.answer_callback_query(call.id, f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_count} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π: {e}")

@bot.message_handler(commands=['stop'])
def stop_upload_handler(message):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π"""
    try:
        if message.from_user.id != ADMIN_ID:
            return
        
        if message.from_user.id in user_states and user_states[message.from_user.id] == "uploading_sessions":
            uploaded_count = session_upload_count.get(message.from_user.id, 0)
            total_sessions = get_total_sessions()
            
            success_text = f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:</b> <code>{uploaded_count}</code>\n\n<b>–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π –≤ –±–æ—Ç–µ:</b> <code>{total_sessions}</code>"
            
            bot.send_message(
                message.chat.id,
                success_text,
                parse_mode='HTML'
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            del user_states[message.from_user.id]
            if message.from_user.id in session_upload_count:
                del session_upload_count[message.from_user.id]
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

@bot.message_handler(content_types=['document'])
def handle_session_upload(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π"""
    try:
        if message.from_user.id != ADMIN_ID:
            return
        
        if message.from_user.id not in user_states or user_states[message.from_user.id] != "uploading_sessions":
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ .session —Ñ–∞–π–ª
        if not message.document.file_name.endswith('.session'):
            bot.reply_to(message, "‚ùå –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .session —Ñ–∞–π–ª—ã")
            return
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–ø–∫—É sessions
            file_path = os.path.join(SESSIONS_FOLDER, message.document.file_name)
            
            with open(file_path, 'wb') as new_file:
                new_file.write(downloaded_file)
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            session_upload_count[message.from_user.id] += 1
            
            bot.reply_to(message, f"‚úÖ –§–∞–π–ª {message.document.file_name} –¥–æ–±–∞–≤–ª–µ–Ω")
            
        except Exception as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")

# ==================== –û–°–ù–û–í–ù–û–ô –ö–û–î (–ù–ï –ò–ó–ú–ï–ù–ï–ù) ====================

@bot.message_handler(commands=['start'])
def start_command(message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        db["users"][str(user_id)] = {
            "username": username,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name
        }
        save_database(db)
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        send_btn = types.InlineKeyboardButton("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send_report")
        profile_btn = types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
        prices_btn = types.InlineKeyboardButton("‚ÄºÔ∏è –¶–µ–Ω—ã", callback_data="prices")
        channel_btn = types.InlineKeyboardButton("üóÇ –ö–∞–Ω–∞–ª", url="https://t.me/+5fUExPKEJn5mYWMy")
        
        markup.add(send_btn)
        markup.add(profile_btn, prices_btn)
        markup.add(channel_btn)
        
        welcome_text = f"üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å <a href='tg://user?id={user_id}'>{username}</a></b>\n\n<blockquote>–°–∞–º–∞—è –≤–∫—É—Å–Ω–∞—è –∏ –≥–æ—Ä—è—á–∞—è –ø–∏—Ü—Ü–∞ —Ç–æ–ª—å–∫–æ —É –Ω–∞—Å </blockquote>"
        
        bot.send_message(
            message.chat.id,
            welcome_text,
            parse_mode='HTML',
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ start: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "profile")
def show_profile(call):
    try:
        user_id = call.from_user.id
        subscription_info = get_subscription_info(user_id)
        
        markup = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton("< –ù–∞–∑–∞–¥", callback_data="back_to_main")
        markup.add(back_btn)
        
        profile_text = f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\nüÜî <b>–ê–π–¥–∏:</b> <code>{user_id}</code>\nüóÉÔ∏è <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> <code>{subscription_info}</code>"
        
        safe_edit_message(
            call.message.chat.id,
            call.message.message_id,
            profile_text,
            parse_mode='HTML',
            reply_markup=markup
        )
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "prices")
def show_prices(call):
    try:
        markup = types.InlineKeyboardMarkup(row_width=2)
        day1_btn = types.InlineKeyboardButton("1 –¥–µ–Ω—å", callback_data="buy_1")
        day3_btn = types.InlineKeyboardButton("3 –¥–Ω—è", callback_data="buy_3")
        day7_btn = types.InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data="buy_7")
        forever_btn = types.InlineKeyboardButton("–ù–∞–≤—Å–µ–≥–¥–∞", callback_data="buy_forever")
        back_btn = types.InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data="back_to_main")
        
        markup.add(day1_btn, day3_btn)
        markup.add(day7_btn, forever_btn)
        markup.add(back_btn)
        
        prices_text = "<b>–¶–µ–Ω—ã –Ω–∞ —Å–∞–º—É—é –≤–∫—É—Å–Ω—É—é –ø–∏—Ü—Ü—É</b> \n\n <b>—à–∞—à–ª—ã–∫:</b>\n<blockquote>1 –¥–µ–Ω—å - 1.2 $\n3 –¥–Ω—è - 2.5 $\n7 –¥–Ω–µ–π - 4.5 $\n–ù–∞–≤—Å–µ–≥–¥–∞ - 8 $</blockquote>"
        
        safe_edit_message(
            call.message.chat.id,
            call.message.message_id,
            prices_text,
            parse_mode='HTML',
            reply_markup=markup
        )
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ü–µ–Ω: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_"))
def create_invoice(call):
    try:
        plan = call.data.split("_")[1]
        user_id = call.from_user.id
        
        prices = {
            "1": {"amount": 2, "days": 1, "name": "1 –¥–µ–Ω—å"},
            "3": {"amount": 2.5, "days": 3, "name": "3 –¥–Ω—è"},
            "7": {"amount": 4.5, "days": 7, "name": "7 –¥–Ω–µ–π"},
            "forever": {"amount": 8.0, "days": "forever", "name": "–ù–∞–≤—Å–µ–≥–¥–∞"}
        }
        
        if plan not in prices:
            return
        
        price_info = prices[plan]
        
        def create_payment():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            crypto = None
            try:
                crypto = loop.run_until_complete(create_crypto_client())
                if not crypto:
                    safe_edit_message(
                        call.message.chat.id,
                        call.message.message_id,
                        "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"
                    )
                    return
                
                invoice = loop.run_until_complete(
                    crypto.create_invoice(
                        asset="USDT",
                        amount=price_info["amount"]
                    )
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
                pay_url = None
                if hasattr(invoice, 'bot_invoice_url'):
                    pay_url = invoice.bot_invoice_url
                elif hasattr(invoice, 'mini_app_invoice_url'):
                    pay_url = invoice.mini_app_invoice_url
                elif hasattr(invoice, 'pay_url'):
                    pay_url = invoice.pay_url
                else:
                    # –°–æ–∑–¥–∞–µ–º URL –≤—Ä—É—á–Ω—É—é
                    pay_url = f"https://t.me/CryptoBot?start=invoice_{invoice.invoice_id}"
                
                payment_data[user_id] = {
                    "invoice_id": invoice.invoice_id,
                    "days": price_info["days"],
                    "plan_name": price_info["name"]
                }
                
                markup = types.InlineKeyboardMarkup()
                pay_btn = types.InlineKeyboardButton("üîó –°—á—ë—Ç", url=pay_url)
                check_btn = types.InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f"check_payment_{invoice.invoice_id}")
                markup.add(pay_btn, check_btn)
                
                invoice_text = f"ü¶ã <b>–°–æ–∑–¥–∞–Ω —Å—á—ë—Ç</b> | <code>{price_info['name']}</code>"
                
                safe_edit_message(
                    call.message.chat.id,
                    call.message.message_id,
                    invoice_text,
                    parse_mode='HTML',
                    reply_markup=markup
                )
                
            except Exception as e:
                safe_edit_message(
                    call.message.chat.id,
                    call.message.message_id,
                    f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞: {str(e)[:100]}"
                )
            finally:
                if crypto and hasattr(crypto, 'close'):
                    try:
                        loop.run_until_complete(crypto.close())
                    except:
                        pass
                loop.close()
        
        thread = threading.Thread(target=create_payment)
        thread.daemon = True
        thread.start()
        
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("check_payment_"))
def check_payment(call):
    try:
        user_id = call.from_user.id
        
        if user_id not in payment_data:
            bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        def check_invoice():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            crypto = None
            try:
                crypto = loop.run_until_complete(create_crypto_client())
                if not crypto:
                    bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
                    return
                
                invoice_id = payment_data[user_id]["invoice_id"]
                invoices = loop.run_until_complete(crypto.get_invoices(invoice_ids=[invoice_id]))
                
                if invoices and invoices[0].status == "paid":
                    days = payment_data[user_id]["days"]
                    add_subscription(user_id, days)
                    
                    success_text = "‚ù§Ô∏è <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n<code>–í–∞–º —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞</code>"
                    
                    markup = types.InlineKeyboardMarkup()
                    back_btn = types.InlineKeyboardButton("< –ù–∞–∑–∞–¥", callback_data="back_to_main")
                    markup.add(back_btn)
                    
                    safe_edit_message(
                        call.message.chat.id,
                        call.message.message_id,
                        success_text,
                        parse_mode='HTML',
                        reply_markup=markup
                    )
                    
                    del payment_data[user_id]
                else:
                    bot.answer_callback_query(call.id, "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    
            except Exception as e:
                bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:50]}")
            finally:
                if crypto and hasattr(crypto, 'close'):
                    try:
                        loop.run_until_complete(crypto.close())
                    except:
                        pass
                loop.close()
        
        thread = threading.Thread(target=check_invoice)
        thread.daemon = True
        thread.start()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
def back_to_main(call):
    try:
        user_id = call.from_user.id
        username = call.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        send_btn = types.InlineKeyboardButton("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send_report")
        profile_btn = types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
        prices_btn = types.InlineKeyboardButton("‚ÄºÔ∏è –¶–µ–Ω—ã", callback_data="prices")
        channel_btn = types.InlineKeyboardButton("üóÇ –ö–∞–Ω–∞–ª", url="https://t.me/+e3GB0pXvOWs1N2Ri")
        
        markup.add(send_btn)
        markup.add(profile_btn, prices_btn)
        markup.add(channel_btn)
        
        welcome_text = f"üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å <a href='tg://user?id={user_id}'>{username}</a></b>\n\n<blockquote>–°–∞–º—ã–π –≤–∫—É—Å–Ω—ã–π –∏ –≥–æ—Ä—è—á–∞—è –ø–∏—Ü—Ü–∞üçï —Ç–æ–ª—å–∫–æ —É –Ω–∞—Å</blockquote>"
        
        safe_edit_message(
            call.message.chat.id,
            call.message.message_id,
            welcome_text,
            parse_mode='HTML',
            reply_markup=markup
        )
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "send_report")
def handle_send_button(call):
    try:
        user_id = call.from_user.id
        
        if not has_active_subscription(user_id):
            bot.answer_callback_query(call.id, "‚ùå –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ–ª—å–∑—è")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        if str(user_id) in db["cooldowns"]:
            last_use = datetime.fromisoformat(db["cooldowns"][str(user_id)])
            if datetime.now() < last_use + timedelta(minutes=COOLDOWN_MINUTES):
                remaining = (last_use + timedelta(minutes=COOLDOWN_MINUTES) - datetime.now()).seconds // 60 + 1
                bot.answer_callback_query(call.id, f"‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} –º–∏–Ω—É—Ç")
                return
        
        safe_edit_message(
            call.message.chat.id,
            call.message.message_id,
            "üîó <b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ</b>\n\n"
            "üìù <i>–§–æ—Ä–º–∞—Ç:</i> <code>https://t.me/username/123</code>\n"
            "‚ö° <i>–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ</i>",
            parse_mode='HTML'
        )
        
        user_states[user_id] = "waiting_for_link"
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")

def is_valid_telegram_link(link: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ Telegram —Å—Å—ã–ª–∫–∏"""
    if not link:
        return False
    
    if link.startswith('https://t.me/') and '/' in link[13:]:
        parts = link.rstrip('/').split('/')
        if len(parts) >= 4 and parts[-1].isdigit():
            return True
    return False

@bot.message_handler(func=lambda message: message.from_user.id in user_states and user_states[message.from_user.id] == "waiting_for_link")
def handle_link_input(message):
    try:
        user_id = message.from_user.id
        link = message.text.strip()
        
        del user_states[user_id]
        
        if not is_valid_telegram_link(link):
            bot.send_message(
                message.chat.id,
                "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>\n\n"
                "üìù <i>–ù—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç:</i> <code>https://t.me/username/123</code>",
                parse_mode='HTML'
            )
            return
        
        
        status_msg = bot.send_message(
            message.chat.id,
            "üöÄ <b>–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∂–∞–ª–æ–±...</b>\n"
            "‚ö° <i>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏</i>",
            parse_mode='HTML'
        )
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        db["cooldowns"][str(user_id)] = datetime.now().isoformat()
        save_database(db)
        
        def run_reports():
            try:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(send_reports(message.chat.id, link, status_msg.message_id))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                safe_edit_message(
                    message.chat.id,
                    status_msg.message_id,
                    f"‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:</b> {str(e)[:100]}",
                    parse_mode='HTML'
                )
            finally:
                loop.close()
        
        thread = threading.Thread(target=run_reports)
        thread.daemon = True
        thread.start()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "close_warning")
def close_warning(call):
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {e}")

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    try:
        if message.from_user.id != ADMIN_ID:
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤")
            return
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        give_btn = types.InlineKeyboardButton("üóÉÔ∏è –í—ã–¥–∞—Ç—å", callback_data="admin_give")
        take_btn = types.InlineKeyboardButton("üìÇ –ó–∞–±—Ä–∞—Ç—å", callback_data="admin_take")
        broadcast_btn = types.InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
        
        markup.add(give_btn, take_btn)
        markup.add(broadcast_btn)
        
        bot.send_message(
            message.chat.id,
            "‚öô <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>",
            parse_mode='HTML',
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "admin_give")
def admin_give_subscription(call):
    try:
        if call.from_user.id != ADMIN_ID:
            return
        
        safe_edit_message(
            call.message.chat.id,
            call.message.message_id,
            "–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        )
        
        user_states[call.from_user.id] = "admin_waiting_user_id_give"
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "admin_take")
def admin_take_subscription(call):
    try:
        if call.from_user.id != ADMIN_ID:
            return
        
        safe_edit_message(
            call.message.chat.id,
            call.message.message_id,
            "–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        )
        
        user_states[call.from_user.id] = "admin_waiting_user_id_take"
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–±–∏—Ä–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "admin_broadcast")
def admin_broadcast(call):
    try:
        if call.from_user.id != ADMIN_ID:
            return
        
        safe_edit_message(
            call.message.chat.id,
            call.message.message_id,
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:"
        )
        
        user_states[call.from_user.id] = "admin_waiting_broadcast_text"
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

@bot.message_handler(func=lambda message: message.from_user.id == ADMIN_ID and message.from_user.id in user_states)
def handle_admin_states(message):
    try:
        state = user_states[message.from_user.id]
        
        if state == "admin_waiting_user_id_give":
            try:
                target_user_id = int(message.text)
                user_states[message.from_user.id] = f"admin_waiting_days_{target_user_id}"
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (–∏–ª–∏ 'forever' –¥–ª—è –Ω–∞–≤—Å–µ–≥–¥–∞):")
            except ValueError:
                bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")
                del user_states[message.from_user.id]
        
        elif state.startswith("admin_waiting_days_"):
            target_user_id = int(state.split("_")[-1])
            days = message.text.strip()
            
            if days == "forever":
                add_subscription(target_user_id, "forever")
                bot.send_message(message.chat.id, f"‚úÖ –í—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–≤—Å–µ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
            else:
                try:
                    days_int = int(days)
                    add_subscription(target_user_id, days_int)
                    bot.send_message(message.chat.id, f"‚úÖ –í—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days_int} –¥–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
                except ValueError:
                    bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–Ω–µ–π")
            
            del user_states[message.from_user.id]
        
        elif state == "admin_waiting_user_id_take":
            try:
                target_user_id = int(message.text)
                if str(target_user_id) in db["subscriptions"]:
                    del db["subscriptions"][str(target_user_id)]
                    save_database(db)
                    bot.send_message(message.chat.id, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–±—Ä–∞–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}")
                else:
                    bot.send_message(message.chat.id, f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏")
                del user_states[message.from_user.id]
            except ValueError:
                bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")
                del user_states[message.from_user.id]
        
        elif state == "admin_waiting_broadcast_text":
            broadcast_text = message.text
            
            sent = 0
            failed = 0
            
            for user_id in db["users"]:
                try:
                    bot.send_message(int(user_id), broadcast_text, parse_mode='HTML')
                    sent += 1
                    time.sleep(0.1)  # –ò–∑–±–µ–≥–∞–µ–º –ª–∏–º–∏—Ç–æ–≤
                except:
                    failed += 1
            
            bot.send_message(
                message.chat.id,
                f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n"
                f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n"
                f"‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {failed}",
                parse_mode='HTML'
            )
            del user_states[message.from_user.id]
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω —Å–æ—Å—Ç–æ—è–Ω–∏–π: {e}")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±
async def get_target_info(username: str, msg_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–ª–∏"""
    try:
        session_files = [f for f in os.listdir(SESSIONS_FOLDER) if f.endswith('.session')]
        if not session_files:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        session_path = os.path.join(SESSIONS_FOLDER, session_files[0])
        client = TelegramClient(session_path, API_ID, API_HASH)
        
        try:
            await asyncio.wait_for(client.connect(), timeout=10)
            
            if not await asyncio.wait_for(client.is_user_authorized(), timeout=5):
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            peer = await asyncio.wait_for(client.get_input_entity(username), timeout=10)
            entity = await asyncio.wait_for(client.get_entity(peer), timeout=10)
            
            if hasattr(entity, 'title'):
                target_name = entity.title
            elif hasattr(entity, 'first_name'):
                target_name = entity.first_name
                if hasattr(entity, 'last_name') and entity.last_name:
                    target_name += f" {entity.last_name}"
            else:
                target_name = username
            
            target_id = entity.id
            return target_name, target_id
        
        finally:
            if client.is_connected():
                await client.disconnect()
    
    except Exception:
        return username, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

async def send_reports(chat_id: int, link: str, status_msg_id: int):
    """–ë—ã—Å—Ç—Ä–∞—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±"""
    
    # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–∫–∏
    username, msg_id = link.rstrip('/').split('/')[-2:]
    msg_id = int(msg_id)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–ª–∏
    safe_edit_message(
        chat_id,
        status_msg_id,
        "üîç <b>–ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–∏...</b>\n"
        "üìä <i>–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</i>",
        parse_mode='HTML'
    )
    
    target_name, target_id = await get_target_info(username, msg_id)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
    session_files = [f for f in os.listdir(SESSIONS_FOLDER) if f.endswith('.session')]
    
    if not session_files:
        safe_edit_message(
            chat_id,
            status_msg_id,
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ—Ç —Å–µ—Å—Å–∏–π –≤ –ø–∞–ø–∫–µ sessions",
            parse_mode='HTML'
        )
        return
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    safe_edit_message(
        chat_id,
        status_msg_id,
        f"‚ö° <b>–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞</b>\n\n"
        f"üéØ <b>–¶–µ–ª—å:</b> <code>{target_name}</code>\n"
        f"üÜî <b>ID:</b> <code>{target_id}</code>\n"
        f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> <code>{msg_id}</code>\n"
        f"üîÑ <b>–°–µ—Å—Å–∏–π –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ:</b> <code>{len(session_files)}</code>\n"
        f"‚öôÔ∏è <b>–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å:</b> <code>{MAX_CONCURRENT_SESSIONS}</code>",
        parse_mode='HTML'
    )
    
    sent = 0
    fail = 0
    logs = []
    
    # –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç–∏
    semaphore = asyncio.Semaphore(MAX_CONCURRENT_SESSIONS)
    
    async def process_session(session_file):
        async with semaphore:
            session_path = os.path.join(SESSIONS_FOLDER, session_file)
            session_name = session_file[:-8]
            
            client = TelegramClient(session_path, API_ID, API_HASH)
            
            try:
                await asyncio.wait_for(client.connect(), timeout=10)
                
                if not await asyncio.wait_for(client.is_user_authorized(), timeout=8):
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö
                    add_invalid_session(session_name)
                    return session_name, False, "–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
                
                await asyncio.wait_for(client.get_dialogs(), timeout=10)
                peer = await asyncio.wait_for(client.get_input_entity(username), timeout=8)
                
                messages = await asyncio.wait_for(client.get_messages(peer, ids=msg_id), timeout=8)
                if not messages:
                    raise ValueError("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
                await asyncio.wait_for(
                    client(functions.messages.ReportSpamRequest(peer=peer)),
                    timeout=10
                )
                
                return session_name, True, "—É—Å–ø–µ—à–Ω–æ"
            
            except asyncio.TimeoutError:
                return session_name, False, "—Ç–∞–π–º–∞—É—Ç"
            except ValueError as e:
                return session_name, False, f"—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            except PeerIdInvalidError:
                return session_name, False, "–Ω–µ–≤–µ—Ä–Ω—ã–π peer"
            except FloodWaitError as e:
                return session_name, False, f"FloodWait: {e.seconds}s"
            except (AuthKeyError, AuthKeyUnregisteredError, UserDeactivatedError):
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö
                add_invalid_session(session_name)
                return session_name, False, "–Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å–µ—Å—Å–∏—è"
            except Exception as e:
                return session_name, False, f"–æ—à–∏–±–∫–∞: {str(e)[:30]}"
            finally:
                try:
                    if client.is_connected():
                        await asyncio.wait_for(client.disconnect(), timeout=3)
                except:
                    pass
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
    tasks = [process_session(sf) for sf in session_files]
    
    completed = 0
    for coro in asyncio.as_completed(tasks):
        try:
            result = await coro
            completed += 1
            
            session_name, success, message = result
            if success:
                sent += 1
                logs.append(f'‚úÖ {session_name}: –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞')
            else:
                fail += 1
                logs.append(f'‚ùå {session_name}: {message}')
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ—Å—Å–∏–π
            if completed % 10 == 0 or completed == len(session_files):
                progress = (completed / len(session_files)) * 100
                safe_edit_message(
                    chat_id,
                    status_msg_id,
                    f"‚ö° <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</b>\n\n"
                    f"üéØ <b>–¶–µ–ª—å:</b> <code>{target_name}</code>\n"
                    f"üÜî <b>ID:</b> <code>{target_id}</code>\n"
                    f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> <code>{msg_id}</code>\n\n"
                    f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> <code>{completed}/{len(session_files)}</code> ({progress:.1f}%)\n"
                    f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ:</b> <code>{sent}</code>\n"
                    f"‚ùå <b>–û—à–∏–±–æ–∫:</b> <code>{fail}</code>",
                    parse_mode='HTML'
                )
        
        except Exception as e:
            fail += 1
            logs.append(f'‚ùå task_error: {str(e)[:30]}')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    success_rate = (sent / len(session_files)) * 100 if session_files else 0
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥ —Ñ–∞–π–ª–∞
    log_content = f"""‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üìä –û–¢–ß–ï–¢ –û –ñ–ê–õ–û–ë–ê–•                        ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë üïê –í—Ä–µ–º—è:           {timestamp}                    ‚ïë
‚ïë üéØ –¶–µ–ª—å:            {target_name:<30}           ‚ïë
‚ïë üÜî Target ID:       {target_id:<30}           ‚ïë
‚ïë üìù –°–æ–æ–±—â–µ–Ω–∏–µ ID:    {msg_id:<30}           ‚ïë
‚ïë üîó –°—Å—ã–ª–∫–∞:          {link:<30}           ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê                                                ‚ïë
‚ïë üìä –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π:    {len(session_files):<30}           ‚ïë
‚ïë ‚úÖ –£—Å–ø–µ—à–Ω–æ:         {sent:<30}           ‚ïë
‚ïë ‚ùå –ù–µ—É–¥–∞—á–Ω–æ:        {fail:<30}           ‚ïë
‚ïë üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å:      {success_rate:.1f}%{' ':<25}           ‚ïë
‚ïë ‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å:  {MAX_CONCURRENT_SESSIONS:<30}           ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìã –î–ï–¢–ê–õ–¨–ù–´–ô –õ–û–ì:
{'='*60}
"""
    
    for log in logs:
        log_content += f"{log}\n"
    
    log_content += f"\n{'='*60}\n"
    log_content += f"üìä –ò–¢–û–ì–û: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent} | –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {fail}\n"
    log_content += f"‚ö° –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ~{len(session_files)//MAX_CONCURRENT_SESSIONS + 1} —Å–µ–∫—É–Ω–¥\n"
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
    log_filename = os.path.join(LOGS_FOLDER, f'report_{int(time.time())}.txt')
    
    try:
        with open(log_filename, 'w', encoding='utf-8') as f:
            f.write(log_content)
        
        # –ö—Ä–∞—Å–∏–≤—ã–π caption –¥–ª—è —Ñ–∞–π–ª–∞
        caption = f"""üéØ <b>–û–¢–ß–ï–¢ –ì–û–¢–û–í!</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚îú üéØ –¶–µ–ª—å: <code>{target_name}</code>
‚îú üÜî ID: <code>{target_id}</code>
‚îú üìù –°–æ–æ–±—â–µ–Ω–∏–µ: <code>{msg_id}</code>
‚îú ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <code>{sent}</code>
‚îú ‚ùå –û—à–∏–±–æ–∫: <code>{fail}</code>
‚îî üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: <code>{success_rate:.1f}%</code>

‚è∞ <b>–ö—É–ª–¥–∞—É–Ω:</b> 15 –º–∏–Ω—É—Ç
‚ö° <b>–°–∫–æ—Ä–æ—Å—Ç—å:</b> ~{len(session_files)//MAX_CONCURRENT_SESSIONS + 1} —Å–µ–∫"""
        
        with open(log_filename, 'rb') as f:
            bot.send_document(
                chat_id,
                f,
                caption=caption,
                parse_mode='HTML'
            )
        
        os.remove(log_filename)
    
    except Exception as e:
        bot.send_message(
            chat_id,
            f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞:</b> {str(e)[:100]}",
            parse_mode='HTML'
        )

@bot.message_handler(func=lambda message: True)
def handle_other_messages(message):
    if message.from_user.id not in user_states:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")

def run_bot():
    retry_count = 0
    max_retries = 10
    
    while retry_count < max_retries:
        try:
            print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
            bot.infinity_polling(
                timeout=30,
                long_polling_timeout=20,
                skip_pending=True,
                none_stop=True
            )
            break
        except Exception as e:
            retry_count += 1
            wait_time = min(retry_count * 5, 60)
            print(f"‚ùå –û—à–∏–±–∫–∞ ({retry_count}/{max_retries}): {e}")
            
            if retry_count < max_retries:
                print(f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {wait_time}—Å...")
                time.sleep(wait_time)
            else:
                print("üíÄ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")
                break

if __name__ == "__main__":
    try:
        if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
            print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN")
            exit(1)
        
        if CRYPTO_PAY_TOKEN == "YOUR_CRYPTO_PAY_TOKEN":
            print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ CRYPTO_PAY_TOKEN")
            exit(1)
        
        session_files = glob.glob(os.path.join(SESSIONS_FOLDER, "*.session"))
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(session_files)} —Å–µ—Å—Å–∏–π")
        
        run_bot()
        
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")